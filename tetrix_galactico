<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tetris en JavaScript</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700&family=Press+Start+2P&display=swap');
        
        /* Base estilosa */
        body {
            display: flex;
            flex-direction: column;
            align-items: center;
            background: linear-gradient(135deg, #0f0c29, #302b63, #24243e);
            font-family: 'Orbitron', sans-serif;
            color: #fff;
            min-height: 100vh;
            margin: 0;
            padding: 20px;
            overflow-x: hidden;
        }

        /* Efecto de estrellas */
        body::before {
            content: "";
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: 
                radial-gradient(2px 2px at 20px 30px, #fff, rgba(0,0,0,0)),
                radial-gradient(2px 2px at 40px 70px, #fff, rgba(0,0,0,0)),
                radial-gradient(2px 2px at 90px 40px, #fff, rgba(0,0,0,0)),
                radial-gradient(2px 2px at 130px 80px, #fff, rgba(0,0,0,0)),
                radial-gradient(2px 2px at 10px 120px, #fff, rgba(0,0,0,0)),
                radial-gradient(2px 2px at 160px 150px, #fff, rgba(0,0,0,0));
            z-index: -1;
            animation: twinkle 5s infinite;
        }

        @keyframes twinkle {
            0%, 100% { opacity: 0.5; }
            50% { opacity: 1; }
        }

        h1 {
            font-family: 'Press Start 2P', cursive;
            color: #fff;
            text-shadow: 0 0 10px #4facfe, 0 0 20px #00f2fe;
            margin: 20px 0;
            font-size: 2.5rem;
            letter-spacing: 2px;
            text-align: center;
        }

        /* Contenedor principal */
        #game-container {
            display: flex;
            margin-top: 20px;
            background: rgba(15, 12, 41, 0.7);
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 0 30px rgba(79, 172, 254, 0.3);
            border: 1px solid #4facfe;
            position: relative;
            overflow: hidden;
        }

        #game-container::after {
            content: "";
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: linear-gradient(
                to bottom right,
                rgba(79, 172, 254, 0) 0%,
                rgba(79, 172, 254, 0) 45%,
                rgba(79, 172, 254, 0.3) 50%,
                rgba(79, 172, 254, 0) 55%,
                rgba(79, 172, 254, 0) 100%
            );
            transform: rotate(30deg);
            animation: shine 5s infinite;
        }

        @keyframes shine {
            0% { transform: rotate(30deg) translate(-30%, -30%); }
            100% { transform: rotate(30deg) translate(30%, 30%); }
        }

        /* Tablero de juego */
        #tetris-board {
            border: 3px solid #4facfe;
            background-color: rgba(0, 0, 20, 0.8);
            border-radius: 8px;
            box-shadow: inset 0 0 20px rgba(0, 242, 254, 0.3), 
                        0 0 30px rgba(79, 172, 254, 0.2);
        }

        /* Panel lateral */
        #side-panel {
            margin-left: 30px;
            display: flex;
            flex-direction: column;
            min-width: 180px;
        }

        /* Siguiente pieza */
        #next-piece {
            border: 3px solid #4facfe;
            background-color: rgba(0, 0, 20, 0.8);
            border-radius: 8px;
            margin-bottom: 30px;
            box-shadow: inset 0 0 15px rgba(0, 242, 254, 0.3), 
                        0 0 20px rgba(79, 172, 254, 0.2);
        }

        /* Panel de puntuación */
        #score-panel {
            border: 3px solid #4facfe;
            padding: 20px;
            background: rgba(15, 12, 41, 0.7);
            border-radius: 8px;
            box-shadow: inset 0 0 15px rgba(0, 242, 254, 0.2);
            margin-bottom: 20px;
        }

        #score-panel h3 {
            color: #00f2fe;
            margin: 10px 0 5px;
            font-size: 1rem;
            text-shadow: 0 0 5px #00f2fe;
        }

        #score-panel p {
            font-size: 1.5rem;
            margin: 0 0 15px;
            font-weight: bold;
            color: #fff;
            text-shadow: 0 0 5px #fff;
            background: rgba(0, 0, 30, 0.5);
            padding: 8px;
            border-radius: 5px;
            border: 1px solid #4facfe;
            text-align: center;
        }

        /* Controles */
        .controls {
            margin-top: 30px;
            text-align: center;
            background: rgba(15, 12, 41, 0.7);
            padding: 20px;
            border-radius: 15px;
            border: 1px solid #4facfe;
            box-shadow: 0 0 20px rgba(79, 172, 254, 0.3);
            width: 100%;
            max-width: 600px;
        }

        .controls p {
            color: #a1d8ff;
            margin-bottom: 20px;
            font-size: 0.9rem;
        }

        /* Botones estilosos */
        .btn {
            position: relative;
            display: inline-block;
            padding: 12px 24px;
            margin: 0 10px;
            color: #fff;
            font-family: 'Orbitron', sans-serif;
            font-weight: bold;
            text-transform: uppercase;
            letter-spacing: 1px;
            background: linear-gradient(45deg, #4facfe 0%, #00f2fe 100%);
            border: none;
            border-radius: 50px;
            cursor: pointer;
            overflow: hidden;
            transition: all 0.3s ease;
            box-shadow: 0 5px 15px rgba(0, 242, 254, 0.4);
            outline: none;
        }

        .btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 20px rgba(0, 242, 254, 0.6);
        }

        .btn:active {
            transform: translateY(1px);
            box-shadow: 0 3px 10px rgba(0, 242, 254, 0.4);
        }

        .btn::before {
            content: "";
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(
                90deg,
                transparent,
                rgba(255, 255, 255, 0.2),
                transparent
            );
            transition: 0.5s;
        }

        .btn:hover::before {
            left: 100%;
        }

        /* Efecto especial para el botón de inicio */
        #start-btn {
            background: linear-gradient(45deg, #ff00cc 0%, #3333ff 100%);
            box-shadow: 0 5px 15px rgba(255, 0, 204, 0.4);
        }

        #start-btn:hover {
            box-shadow: 0 8px 20px rgba(255, 0, 204, 0.6);
        }

        /* Efecto especial para el botón de pausa */
        #pause-btn {
            background: linear-gradient(45deg, #f83600 0%, #f9d423 100%);
            box-shadow: 0 5px 15px rgba(248, 54, 0, 0.4);
        }

        #pause-btn:hover {
            box-shadow: 0 8px 20px rgba(248, 54, 0, 0.6);
        }

        /* Responsive design */
        @media (max-width: 768px) {
            #game-container {
                flex-direction: column;
                align-items: center;
            }
            
            #side-panel {
                margin-left: 0;
                margin-top: 20px;
                flex-direction: row;
                flex-wrap: wrap;
                justify-content: center;
            }
            
            #next-piece {
                margin-right: 20px;
                margin-bottom: 20px;
            }
            
            .btn {
                margin-bottom: 10px;
                padding: 10px 20px;
            }
            
            h1 {
                font-size: 1.8rem;
            }
        }

        /* Efecto de partículas para el fondo (opcional) */
        .particle {
            position: fixed;
            background: white;
            border-radius: 50%;
            z-index: -1;
        }
    </style>
</head>
<body>
   <h1>TETRIS GALÁCTICO</h1>
    <div id="game-container">
        <canvas id="tetris-board" width="300" height="600"></canvas>
        <div id="side-panel">
            <canvas id="next-piece" width="150" height="150"></canvas>
            <div id="score-panel">
                <h3>Puntuación</h3>
                <p id="score">0</p>
                <h3>Nivel</h3>
                <p id="level">1</p>
                <h3>Líneas</h3>
                <p id="lines">0</p>
            </div>
        </div>
    </div>
    <div class="controls">
        <p>Controles: ← → para mover, ↑ para rotar, ↓ para bajar rápido, ESPACIO para caída instantánea</p>
        <button id="start-btn" class="btn">Comenzar Juego</button>
        <button id="pause-btn" class="btn">Pausa</button>
    </div>

    <script>
        // Elementos del DOM
        const canvas = document.getElementById('tetris-board');
        const ctx = canvas.getContext('2d');
        const nextCanvas = document.getElementById('next-piece');
        const nextCtx = nextCanvas.getContext('2d');
        const scoreElement = document.getElementById('score');
        const levelElement = document.getElementById('level');
        const linesElement = document.getElementById('lines');
        const startBtn = document.getElementById('start-btn');
        const pauseBtn = document.getElementById('pause-btn');

        // Escala del tablero
        ctx.scale(30, 30);
        nextCtx.scale(30, 30);

        // Tablero de juego
        const ROWS = 20;
        const COLS = 10;
        const board = Array(ROWS).fill().map(() => Array(COLS).fill(0));

        // Piezas de Tetris y sus colores
        const COLORS = [
            null,
            '#FF0D72', // T
            '#0DC2FF', // J
            '#0DFF72', // Z
            '#F538FF', // O
            '#FF8E0D', // S
            '#FFE138', // L
            '#3877FF'  // I
        ];

        // Formas de las piezas
        const SHAPES = [
            null,
            [[0, 0, 0], [1, 1, 1], [0, 1, 0]], // T
            [[0, 0, 0], [2, 2, 2], [0, 0, 2]], // J
            [[0, 0, 0], [3, 3, 0], [0, 3, 3]], // Z
            [[0, 0, 0, 0], [0, 4, 4, 0], [0, 4, 4, 0], [0, 0, 0, 0]], // O
            [[0, 0, 0], [0, 5, 5], [5, 5, 0]], // S
            [[0, 0, 0], [6, 6, 6], [6, 0, 0]], // L
            [[0, 0, 0, 0], [0, 0, 0, 0], [7, 7, 7, 7], [0, 0, 0, 0]]  // I
        ];

        // Variables del juego
        let score = 0;
        let level = 1;
        let lines = 0;
        let gameOver = false;
        let paused = false;
        let dropCounter = 0;
        let dropInterval = 1000;
        let lastTime = 0;
        let player = {
            pos: {x: 0, y: 0},
            matrix: null,
            next: null
        };

        // Función para crear una pieza
        function createPiece(type) {
            return {
                matrix: SHAPES[type],
                color: COLORS[type]
            };
        }

        // Función para crear la siguiente pieza aleatoria
        function createNextPiece() {
            const type = Math.floor(Math.random() * 7) + 1;
            return createPiece(type);
        }

        // Dibujar el tablero
        function drawBoard() {
            ctx.fillStyle = '#111';
            ctx.fillRect(0, 0, canvas.width, canvas.height);

            drawMatrix(player.matrix, player.pos, player.color);
            drawMatrix(board, {x: 0, y: 0}, null, true);
        }

        // Dibujar la siguiente pieza
        function drawNextPiece() {
            nextCtx.fillStyle = '#111';
            nextCtx.fillRect(0, 0, nextCanvas.width, nextCanvas.height);

            if (player.next) {
                // Centrar la pieza en el canvas de "siguiente"
                const offsetX = (5 - player.next.matrix[0].length) / 2;
                const offsetY = (5 - player.next.matrix.length) / 2;
                
                drawMatrix(player.next.matrix, {x: offsetX, y: offsetY}, player.next.color, false, nextCtx);
            }
        }

        // Función para dibujar una matriz
        function drawMatrix(matrix, offset, color, isBoard = false, context = ctx) {
            matrix.forEach((row, y) => {
                row.forEach((value, x) => {
                    if (value !== 0) {
                        if (isBoard) {
                            context.fillStyle = COLORS[value];
                        } else {
                            context.fillStyle = color;
                        }
                        context.fillRect(x + offset.x, y + offset.y, 1, 1);
                        
                        // Borde de las piezas
                        context.strokeStyle = '#000';
                        context.lineWidth = 0.05;
                        context.strokeRect(x + offset.x, y + offset.y, 1, 1);
                    }
                });
            });
        }

        // Fusionar la pieza actual con el tablero
        function merge() {
            player.matrix.forEach((row, y) => {
                row.forEach((value, x) => {
                    if (value !== 0) {
                        board[y + player.pos.y][x + player.pos.x] = value;
                    }
                });
            });
        }

        // Rotar la pieza
        function rotate(matrix) {
            const N = matrix.length;
            const result = Array(N).fill().map(() => Array(N).fill(0));
            
            for (let y = 0; y < N; y++) {
                for (let x = 0; x < N; x++) {
                    result[x][N - 1 - y] = matrix[y][x];
                }
            }
            
            return result;
        }

        // Verificar colisión
        function collide() {
            const [m, o] = [player.matrix, player.pos];
            for (let y = 0; y < m.length; y++) {
                for (let x = 0; x < m[y].length; x++) {
                    if (m[y][x] !== 0 &&
                        (board[y + o.y] === undefined ||
                         board[y + o.y][x + o.x] === undefined ||
                         board[y + o.y][x + o.x] !== 0)) {
                        return true;
                    }
                }
            }
            return false;
        }

        // Mover la pieza
        function playerMove(dir) {
            player.pos.x += dir;
            if (collide()) {
                player.pos.x -= dir;
            }
        }

        // Rotar la pieza del jugador
        function playerRotate() {
            const pos = player.pos.x;
            let offset = 1;
            const rotated = rotate(player.matrix);
            const originalMatrix = player.matrix;
            player.matrix = rotated;
            
            while (collide()) {
                player.pos.x += offset;
                offset = -(offset + (offset > 0 ? 1 : -1));
                
                if (offset > rotated[0].length) {
                    player.matrix = originalMatrix;
                    player.pos.x = pos;
                    return;
                }
            }
        }

        // Resetear la posición de la pieza
        function playerReset() {
            player.matrix = player.next.matrix;
            player.color = player.next.color;
            player.next = createNextPiece();
            player.pos.y = 0;
            player.pos.x = Math.floor(COLS / 2) - Math.floor(player.matrix[0].length / 2);
            
            if (collide()) {
                gameOver = true;
            }
        }

        // Dejar caer la pieza
        function playerDrop() {
            player.pos.y++;
            if (collide()) {
                player.pos.y--;
                merge();
                playerReset();
                arenaSweep();
                updateScore();
            }
            dropCounter = 0;
        }

        // Bajar la pieza
        function playerHardDrop() {
            while (!collide()) {
                player.pos.y++;
            }
            player.pos.y--;
            merge();
            playerReset();
            arenaSweep();
            updateScore();
            dropCounter = 0;
        }

        // Limpiar líneas completas
        function arenaSweep() {
            let linesCleared = 0;
            outer: for (let y = board.length - 1; y >= 0; y--) {
                for (let x = 0; x < board[y].length; x++) {
                    if (board[y][x] === 0) {
                        continue outer;
                    }
                }
                
                const row = board.splice(y, 1)[0].fill(0);
                board.unshift(row);
                y++;
                
                linesCleared++;
            }
            
            if (linesCleared > 0) {
                lines += linesCleared;
                // Aumentar puntuación basado en líneas limpiadas
                score += [0, 40, 100, 300, 1200][linesCleared] * level;
                // Aumentar nivel cada 10 líneas
                level = Math.floor(lines / 10) + 1;
                // Aumentar velocidad
                dropInterval = 1000 - (level - 1) * 100;
                if (dropInterval < 100) dropInterval = 100;
            }
        }

        // Actualizar el marcador
        function updateScore() {
            scoreElement.textContent = score;
            levelElement.textContent = level;
            linesElement.textContent = lines;
        }

        // Bucle del juego
        function update(time = 0) {
            if (gameOver || paused) return;
            
            const deltaTime = time - lastTime;
            lastTime = time;
            
            dropCounter += deltaTime;
            if (dropCounter > dropInterval) {
                playerDrop();
            }
            
            drawBoard();
            drawNextPiece();
            requestAnimationFrame(update);
        }

        // Manejo de teclado
        document.addEventListener('keydown', event => {
            if (gameOver) return;
            
            switch (event.keyCode) {
                case 37: // Izquierda
                    playerMove(-1);
                    break;
                case 39: // Derecha
                    playerMove(1);
                    break;
                case 40: // Abajo
                    playerDrop();
                    break;
                case 38: // Arriba
                    playerRotate();
                    break;
                case 32: // Espacio
                    playerHardDrop();
                    break;
                case 80: // P
                    paused = !paused;
                    if (!paused && !gameOver) {
                        update();
                    }
                    pauseBtn.textContent = paused ? 'Continuar' : 'Pausa';
                    break;
            }
        });

        // Botones de control
        startBtn.addEventListener('click', () => {
            // Reiniciar el juego
            board.forEach(row => row.fill(0));
            score = 0;
            level = 1;
            lines = 0;
            gameOver = false;
            updateScore();
            
            // Crear primeras piezas
            player.next = createNextPiece();
            playerReset();
            
            // Iniciar el juego
            paused = false;
            pauseBtn.textContent = 'Pausa';
            update();
        });

        pauseBtn.addEventListener('click', () => {
            if (gameOver) return;
            paused = !paused;
            pauseBtn.textContent = paused ? 'Continuar' : 'Pausa';
            if (!paused) {
                update();
            }
        });

        // Inicializar el juego
        player.next = createNextPiece();
        playerReset();
        updateScore();
        drawBoard();
        drawNextPiece();
    </script>
</body>
</html>
